<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[React学习-Todo]]></title>
    <url>%2F2018%2F03%2F14%2FReact%E5%AD%A6%E4%B9%A0-Todo-md%2F</url>
    <content type="text"><![CDATA[如何开始一个 React App1npm i create-react-app -g &amp;&amp; create-react-app my-app &amp;&amp; cd my-app &amp;&amp; npm start 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788import React, &#123; Component&#125; from 'react';import ReactDOM from 'react-dom';import './index.css';class TodoApp extends Component &#123; constructor (props) &#123; super(props); this.state = &#123; items: [], text: '' &#125;; this.changeHandle = this.changeHandle.bind(this); this.submitHandle = this.submitHandle.bind(this); this.deleteItem = this.deleteItem.bind(this); &#125; changeHandle (e) &#123; this.setState(&#123; text: e.target.value &#125;); &#125; submitHandle (e) &#123; e.preventDefault(); if(!this.state.text.length) return; const newItme = &#123; text: this.state.text, id: Date.now() &#125;; this.setState(prevState =&gt; (&#123; items: prevState.items.concat(newItme), text: '' &#125;)); &#125; deleteItem (index) &#123; let items = this.state.items; items.splice(index, 1); this.setState(&#123; items: items &#125;); &#125; render () &#123; return ( &lt;div&gt; &lt;h1&gt;Todo List&lt;/h1&gt; &lt;TodoList items=&#123; this.state.items &#125; callbackDelete=&#123; this.deleteItem &#125; /&gt; &lt;form onSubmit=&#123; this.submitHandle &#125;&gt; &lt;label htmlFor="new-todo"&gt; What needs to be done? &lt;/label&gt; &lt;input id="new-todo" type="text" onChange=&#123; this.changeHandle &#125; value=&#123; this.state.text &#125; /&gt; &lt;button&gt; Add #&#123; this.state.items.length + 1 &#125; &lt;/button&gt; &lt;/form&gt; &lt;/div&gt; ) &#125;&#125;class TodoList extends Component &#123; render () &#123; return ( &lt;ul&gt; &#123; this.props.items.map((item, index) =&gt; ( &lt;li key=&#123; item.id &#125;&gt; &#123; item.text &#125; &lt;button onClick=&#123; this.props.callbackDelete.bind(null,index) &#125;&gt;DELETE&lt;/button&gt; &lt;/li&gt; )) &#125; &lt;/ul&gt; ); &#125;&#125;// 根节点const mountNode = document.getElementById('root');ReactDOM.render( &lt;TodoApp /&gt;, mountNode); 案例截图]]></content>
      <tags>
        <tag>React</tag>
        <tag>React Demo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[node.js下mongoose简单操作]]></title>
    <url>%2F2018%2F02%2F24%2Fnode-js%E4%B8%8Bmongoose%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C-md%2F</url>
    <content type="text"><![CDATA[Mongoose API: http://mongoosejs.com/docs/api.html 连接123// 连接 mongoose var mongoose = require('mongoose');var db = mongoose.createConnection('mongodb://127.0.0.1:27017/NodeJS'); 连接错误处理1234// 连接错误db.on('error', function(error) &#123; console.log(error);&#125;); 自定义表结构12345678// Schema 结构var mongooseSchema = new mongoose.Schema(&#123; username : &#123;type : String, default : '匿名用户'&#125;, title : &#123;type : String&#125;, content : &#123;type : String&#125;, time : &#123;type : Date, default: Date.now&#125;, age : &#123;type : Number&#125;&#125;); 添加实例方法1234// 添加 mongoose 实例方法mongooseSchema.methods.findbyusername = function(username, callback) &#123; return this.model('mongoose').find(&#123;username: username&#125;, callback);&#125; 添加静态方法1234// 添加 mongoose 静态方法，静态方法在Model层就能使用mongooseSchema.statics.findbytitle = function(title, callback) &#123; return this.model('mongoose').find(&#123;title: title&#125;, callback);&#125; 常见表实例12// modelvar mongooseModel = db.model('mongoose', mongooseSchema); 新增记录 | save123456789101112// 增加记录 基于 entity 操作var doc = &#123;username : 'emtity_demo_username', title : 'emtity_demo_title', content : 'emtity_demo_content'&#125;;var mongooseEntity = new mongooseModel(doc);mongooseEntity.save(function(error) &#123; if(error) &#123; console.log(error); &#125; else &#123; console.log('saved OK!'); &#125; // 关闭数据库链接 db.close();&#125;); 1234567891011// 增加记录 基于model操作var doc = &#123;username : 'model_demo_username', title : 'model_demo_title', content : 'model_demo_content'&#125;;mongooseModel.create(doc, function(error)&#123; if(error) &#123; console.log(error); &#125; else &#123; console.log('save ok'); &#125; // 关闭数据库链接 db.close();&#125;); 修改记录 | update1234567891011121314// 修改记录mongooseModel.update(conditions, update, options, callback);var conditions = &#123;username : 'model_demo_username'&#125;;var update = &#123;$set : &#123;age : 27, title : 'model_demo_title_update'&#125;&#125;;var options = &#123;upsert : true&#125;;mongooseModel.update(conditions, update, options, function(error)&#123; if(error) &#123; console.log(error); &#125; else &#123; console.log('update ok!'); &#125; //关闭数据库链接 db.close();&#125;); 查询记录 | find123456789101112// 查询// 基于实例方法的查询var mongooseEntity = new mongooseModel(&#123;&#125;);mongooseEntity.findbyusername('model_demo_username', function(error, result)&#123; if(error) &#123; console.log(error); &#125; else &#123; console.log(result); &#125; //关闭数据库链接 db.close();&#125;); 12345678910// 基于静态方法的查询mongooseModel.findbytitle('emtity_demo_title', function(error, result)&#123; if(error) &#123; console.log(error); &#125; else &#123; console.log(result); &#125; //关闭数据库链接 db.close();&#125;); 12345678910111213// mongoose findvar criteria = &#123;title : 'emtity_demo_title'&#125;; // 查询条件var fields = &#123;title : 1, content : 1, time : 1&#125;; // 待返回的字段var options = &#123;&#125;;mongooseModel.find(criteria, fields, options, function(error, result)&#123; if(error) &#123; console.log(error); &#125; else &#123; console.log(result); &#125; //关闭数据库链接 db.close();&#125;); 删除记录 | remove123456789101112// 删除记录var conditions = &#123;username: 'emtity_demo_username'&#125;;mongooseModel.remove(conditions, function(error)&#123; if(error) &#123; console.log(error); &#125; else &#123; console.log('delete ok!'); &#125; //关闭数据库链接 db.close();&#125;);]]></content>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[filter引起点击卡顿问题]]></title>
    <url>%2F2018%2F01%2F23%2Ffilter%E5%BC%95%E8%B5%B7%E7%82%B9%E5%87%BB%E5%8D%A1%E9%A1%BF%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[缘由-webkit-filter:blur属性对于PC端来说非常好用，高斯模糊效果特别棒，但是这个效果用在移动端的时候就心有余而力不足了，由于硬件限制，移动端的硬件渲染速度会非常耗费资源所以导致卡顿。 处理在移动端用图片替代或换一种效果。 测试结果IOS体验极差 , Android 略好。]]></content>
      <tags>
        <tag>性能</tag>
        <tag>曾经头疼过的BUG</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[迁移开发文档]]></title>
    <url>%2F2018%2F01%2F22%2F%E8%BF%81%E7%A7%BB%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3%2F</url>
    <content type="text"><![CDATA[开发环境迁移 [TOC] 开发环境 node pm2(进程守护) nodemon(node检测自启动) snpm(smart npm) yarn(依赖管理) nvm(node版本管理，windows 并不好用) npm GIT TortoiseGit(git GUI) SVN TortoiseSVN Ruby环境(sass，compass需求) 开发必备浏览器 Chrome Opera Firefox IE 8.0 + Chrome 扩展插件 Vue devTool （Vue 调试工具） Window Resizer ( 调整浏览器窗口 ) Charset ( 修改编码格式 ) Add to infinity （优化 Chrome） WEB 前端助手 Octotree ( github 浏览文件助手 ) React developer tools （React 调试工具） OneTab （优化标签页） 印象笔记 剪藏 开发工具 vscode sublime text3 notepad++ Visual Studio Code 插件 Auto Close Tag Autoprefixer Beautiful Code Runner colorize cssrem Easy Sass ESLint Live Server Markdown All in One Path Autocpmplete Sublime Babel Version Lens Vetur View In Browser VueHelper React-Navicat/React/Redux snippets for es6/es7 Quokka (console 调试) Prettier (Code formatter) Themes One Monokai Theme Sublime 插件 Autoprefixer CodeFormatter CSScomb HTML-CSS-JS prettify javascript Completions Pretty JSON Atom 插件 Activate Power Mode Atom Beautiful Atom Ternjs Bracket Matcher Command Palette Dev Live Reload Emmet 辅助神器 Snipaste (不仅仅是截图) f.lux(护眼神器) cmder(超棒的cmd) FSCapture GifCam Wox Rolan Everything (搜索) f5 (快速启动一个带服务器的自更新项目) Clover (资源管理工具) 为知笔记 Typora (markdown 编辑器) shadowsocks Postman (api测试神器) 数据库工具 Robomongo (MongoDB) Navicat for MySQL (MySQL) 服务器工具 SecureCRT SecureFX Xshell 5 Xftp 5 FlashFXP 文件对比工具 Beyond Compare 4 美工 Adobe Photoshop CS6 PxCook 词典 有道词典 放松 网易云音乐 阅读 极速PDF 聊天工具 TIM 微信]]></content>
      <tags>
        <tag>开发迁移</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swiper 常用 api 和注意点]]></title>
    <url>%2F2018%2F01%2F09%2FSwiper-%E5%B8%B8%E7%94%A8-api-%E5%92%8C%E6%B3%A8%E6%84%8F%E7%82%B9%2F</url>
    <content type="text"><![CDATA[Swiper 初始化1234567&lt;div class="swiper-container"&gt; &lt;div class="swiper-wrapper"&gt; &lt;div class="swiper-slide"&gt;slider1&lt;/div&gt; &lt;div class="swiper-slide"&gt;slider2&lt;/div&gt; &lt;div class="swiper-slide"&gt;slider3&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 123var mySwiper = new Swiper('.swiper-container', &#123; autoplay: true,//可选选项，自动滑动&#125;) 常用apidirectionSlides的滑动方向，可设置水平(horizontal)或垂直(vertical)freeMode默认为false，普通模式：slide滑动时只滑动一格，并自动贴合wrapper，设置为true则变为free模式，slide会根据惯性滑动且不会贴合。freeModeMomentumRatiofree模式动量值（移动惯量）。设置的值越大，当释放slide时的滑动时间越长。默认1s。slidesPerView设置slider容器能够同时显示的slides数量(carousel模式)。 可以设置为数字（可为小数，小数不可loop），或者 &#39;auto&#39;则自动根据slides的宽度来设定数量。 loop模式下如果设置为&#39;auto&#39;还需要设置另外一个参数loopedSlides。observer启动动态检查器(OB/观众/观看者)，当改变swiper的样式（例如隐藏/显示）或者修改swiper的子元素时，自动初始化swiper。 默认false，不开启，可以使用update()方法更新。observeParents将observe应用于Swiper的父元素。当Swiper的父元素变化时，例如window.resize，Swiper更新。 重要！！！1.初始化的 Swiper 容器 id 必须保持唯一性。当一个页面存在多个 Swiper 并同时初始化的时候, 必须给不同的标识，不然初始化失败，切记切记！！！(哭。。。)]]></content>
      <tags>
        <tag>swiper</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[koa 挂载服务器]]></title>
    <url>%2F2018%2F01%2F09%2Fkoa-%E6%8C%82%E8%BD%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[12345678910const Koa = require('koa');const app = new Koa();const path = require('path');const serve = require('koa-static');const main = serve(path.join(__dirname, '../public'))app.use(main);app.listen(4001); 依赖 koa koa-static 用途通过 koa 启动一个服务器，把 public 下的项目挂载到该服务器指定的端口下。]]></content>
      <tags>
        <tag>Koa</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[几行 node 带你解决 CROS]]></title>
    <url>%2F2018%2F01%2F09%2F%E5%87%A0%E8%A1%8C-node-%E5%B8%A6%E4%BD%A0%E8%A7%A3%E5%86%B3-CROS%2F</url>
    <content type="text"><![CDATA[12345678910const express = require(&apos;express&apos;);const request = require(&apos;request&apos;);const app = express();app.use(&apos;/&apos;, (req,res) =&gt; &#123; const url = &apos;http://www.kan100.com&apos; + req.url; req.pipe(request(url)).pipe(res.set(&apos;Access-Control-Allow-Origin&apos;, &apos;*&apos;));&#125;);app.listen(process.env.PORT || 3001); 依赖 express request 使用方法项目启动前, 先启动该代理，api访问3001端口或自定义端口，nodejs将自动帮你代理url。 原理同源策略只存在于浏览器端，终端不存在跨域问题。]]></content>
  </entry>
  <entry>
    <title><![CDATA[面试题锦集]]></title>
    <url>%2F2017%2F11%2F30%2F%E9%9D%A2%E8%AF%95%E9%A2%98%E9%94%A6%E9%9B%86%2F</url>
    <content type="text"><![CDATA[福州网龙 - web前端(p4,p5)js编程题 1234567891011121314151617181920run( next =&gt; &#123; setTimeout(() =&gt; &#123; console.log(1); next(); &#125;,1000); &#125;, next =&gt; &#123; console.log(2); next(); &#125;, next =&gt; &#123; console.log(3); next(); &#125;);// 运行结果// 1 2 3// 需求： run 函数可以添加任意个参数 我的解法 | Emlice | 张张张炒蛋 12345678910111213// Promisefunction run (...args) &#123; const process = [].concat(...args); return new Promise((resolve, reject) =&gt; &#123; if(!process.length) reject(); process[0](resolve); &#125;).then(() =&gt; &#123; var params = process.slice(1); run(params); &#125;).catch(err =&gt; &#123; console.log('执行完毕'); &#125;);&#125;]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>web前端</tag>
        <tag>interview issue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[细说setTimeout/setImmediate/process.nextTick的区别]]></title>
    <url>%2F2017%2F11%2F28%2F%E7%BB%86%E8%AF%B4setTimeout-setImmediate-process-nextTick%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[node.js中的非IO的异步API提供了四种方法，分别为setTimeOut(),setInterval(),setImmediate()以及process.nextTick()，四种方法实现原理相似，但达到的效果略有区别： 一、事件循环Event Loop首先，我们需要了解node.js的基于事件循环的事件模型，正是因为它才使得node.js中回调函数十分普遍，也正是基于此，node.js实现了单线程高效的异步IO（这里说的单线程主要说的是执行javascript代码部分的线程，而异步IO部分node.js其实还是利用线程池去执行的）。 简单的讲就是，在node.js启动时，创建了一个类似while(true)的循环体，每次执行一次循环体称为一次tick，每个tick的过程就是查看是否有事件等待处理，如果有，则取出事件极其相关的回调函数并执行，然后执行下一次tick。所以，有如下代码： 123A();B();C(); 它的执行逻辑是，先询问事件观察者当前是否有任务需要执行？观察者回答“有”，于是取出A执行，A是否有回调函数？如果有（如果没有则继续询问当前是否有任务需要执行），则取出回调函数并执行(注意：回调函数的执行基本都是异步的，可能不止一个回调)，执行完回调后通过某种方式通知调用者，我执行完了，并把执行结果给你，你自己酌情处理吧，主函数不需要不断询问回调函数执行结果，回调函数会以通知的方式告知调用者我执行完了（don’t call me ,i will call you.），而这个过程主线程并不需要等待回调函数执行完成，它会继续向前执行，即再次询问观察者当前是否还有任务需要执行，重复上面的步骤。。。直到观察者回答没有了，线程结束。 整个事件循环的逻辑如下图： 二：setTimeOut(),setInterval(),setImmediate()以及process.nextTik()这里面setTimeOut()与setInterval()除了执行频次外基本相同，都表示主线程执行完一定时间后立即执行，而setImmediate()与之十分相似，也表示主线程执行完成后立即执行。那么他们之间的区别是什么呢？ 代码如下： 1234567setTimeout(function()&#123; console.log("setTimeout");&#125;,0);setImmediate(function()&#123; console.log("setImmediate");&#125;); 两者都代表主线程完成后立即执行，其执行结果是不确定的，可能是setTimeout回调函数执行结果在前，也可能是setImmediate回调函数执行结果在前，但setTimeout回调函数执行结果在前的概率更大些，这是因为他们采用的观察者不同，setTimeout采用的是类似IO观察者，setImmediate采用的是check观察者，而process.nextTick()采用的是idle观察者。 三种观察者的优先级顺序是：idle观察者&gt;&gt;io观察者&gt;check观察者 process.nextTick()与setImmediate()和setTimeout()的区别如下： 1、原始代码： 123A();B();C(); 它的执行顺序即代码顺序： 2、process.nextTick()执行效果，代码如下： 123A();process.nextTick(B);C(); 它的执行顺序如下： 3、setImmediate()或者setTimeout()执行效果，代码如下： 123A();setImmediate(B);//或者setTimeout(B,0);C(); 它的执行顺序如下： 结论process.nextTick()，效率最高，消费资源小，但会阻塞CPU的后续调用；setTimeout()，精确度不高，可能有延迟执行的情况发生，且因为动用了红黑树，所以消耗资源大；setImmediate()，消耗的资源小，也不会造成阻塞，但效率也是最低的。]]></content>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何有效的阅读]]></title>
    <url>%2F2017%2F11%2F27%2F%E5%A6%82%E4%BD%95%E6%9C%89%E6%95%88%E7%9A%84%E9%98%85%E8%AF%BB%2F</url>
    <content type="text"><![CDATA[每个人都可以长期做到每周有效阅读6本书 1.破除预设的限制 你是否有过只买不读的囤书习惯？ 你是否认为自己没有时间，没有精力去大量读书？ 你是否觉得自己阅读很慢，即使仔细读了还是会忘，在做阅读的无用功？ 也许你觉得自己没有能力进行快速阅读； 也许你会觉得自己很忙，挤不出时间阅读； 也许你觉得自己没有过目不忘的超强记忆力； 曾经我以为“快速阅读”就是通过速读技巧提高阅读速度，使自己变成一个“读书很快”的人，而我觉得自己做不到这一点，于是放弃了大量阅读的乐趣，承认自己只有一周读一本书，一月读一本书的能力。以至于不自觉地默认: 大量的有效阅读属于非常厉害的大神才能做到的事情。 但是今天有一位大神破除了我给自己预设的限制。他并不是只教给我们快速阅读的方法和技巧，而是告诉我们快速阅读的真相。 他认为，我们不是没有时间和精力读书，而是我们没有像吃饭睡觉一样自然的阅读习惯，并会告诉我们怎样一步一步培养阅读习惯；我们不是没有快速阅读和过目不忘的能力，我们只是被陈旧的观念所束缚。 他是谁呢？他就是日本著名的书评人印南敦史，为多家网站撰稿，每月为近60本书撰写书评。因此，他每月的书籍阅读量在60本以上，每年的阅读量在700本书以上。除此之外，他有撰稿人的常规工作，而且因为热爱音乐，还经常担任DJ。 但是曾经的他，由于在9岁的时候脑部受伤，以为自己脑子摔坏了，很笨，相信自己没有读和写的能力，尽管他的父亲是一名编辑；曾经的他读一页书需要5分钟，在注意力不集中的时候，甚至花上10分钟。 印南先生并没有执着于学习速读的技巧，而是通过观念的转变产生了极大的变化。比如，他说：去掉不相信自己的执念，每个人都可以做到快速阅读。最重要的是：他在做书评人的过程中，发现了快速有效进行大量阅读的真相。现在他把这个秘诀分享给了我们，告诉我们如何长期坚持每周有效阅读6本书。 2.长期进行大量有效阅读的秘诀这个秘诀是什么？怎样才能做到长期坚持每周有效阅读6本书呢？根据本书的内容，我从颠覆陈旧观念，培养阅读习惯和基本的速读技巧等三个方面做了总结： 2.1颠覆陈旧观念 1.摆脱“书一定要仔细阅读”的执念 我们以为仔细阅读就可以记住书中大部分的内容，理解更深刻的内涵。 但是印南先生在开始撰写书评后发现一个事实：无论多么仔细地研读，还是会忘记大部分内容；阅读速度与理解程度，记忆效果不成正比。 也就是说，一个人花了一天阅读一本书，也许比你花一个星期阅读一本书记住的东西更多，理解得更加深刻。 如果这样的对比，还是不足以让你放弃“仔细阅读”的执念，那么请看下面一句话：即使仔细阅读，记不住的内容还是会遗忘。 2.从“复制100%到“邂逅1%” 读书的意义是什么？难道是为了把书中的内容复制到大脑中，然后牢牢地记住吗？ 我们试着回顾自己的阅读经历，并不是一本书的所有文字改变了我们原本的想法，或震撼了我们的心灵，而是我们能够记住的某一句话或某几句话。 因此读书的真正意义，并不在于“复制100%的原文”，而是在于“邂逅1%的收获”。能够记住的内容才是对自己有益的精华。 3.从储存式阅读到流水式阅读 流水式阅读是指，让书籍内容从心中流过，只要流过，便有意义。 存储式阅读是指，读书就是要一字一句，准确理解作者的写作意图，并记在脑海里。 存储式阅读让我们记载了大量的可能用不上的读书笔记或是思维导图。可以想象，每一本书都像这样阅读，我们将耗费了多少时间和精力。面对海量的书籍和信息，我们怎么可能读得完？于是，我们的书架上堆满了尚未阅读的书。 流水式阅读就是帮助我们解决这个问题的。流水式阅读让每天不同的书籍在我们生命里流过，像流淌的音乐一样，滋养我们的生命。 4.从“为了记忆而读”到“为了记录而读” 我们阅读失败的真正原因是，为了记忆而读。这种读书的理念让我们不停地做阅读中的无用功。我们的大脑容量有限，是系统盘，不是硬盘。如果把大脑当作记忆的容器，我们的大脑就无法用做思考使用。 因此，我们要摈弃“将信息印刻在自己心中”的想法，将其转变为“记录在身外”。我们不要只是一味地读，也要写，要拥有“为记录而读，为写而读”的理念。 5.从“拥有思维”到“使用思维” 拥有思维，就是希望把书上所写的内容全部据为己有。 使用思维，就是无论是书籍，还是知识，仅将必须置于手边的部分留下，其余的不积有。 在网络媒体百花齐放，信息爆炸的时代，我们必须将必要和不必要的东西区分开来，进行取舍。读书也一样，只选择必要的部分去读。 就像断舍离的理念一样，当我们从拥有思维转化成使用思维时，我们就成为了知识和书籍的主人，而不是让它们成为我们的主人。 6.从“储存式书柜”理念到“流水式书柜”理念 储存式书柜的理念就是，书就是财产，大量藏书是身份的象征。 流水式书柜的理念就是，定期整理书柜，只留不能舍弃的书。 只保留不能舍弃的书，好处多多。 留白的空间让人神清气爽，生活工作态度都会更加积极; 会让人更加爱书; 舍弃不需要的书，才会有新书进来; 重新发现自己的价值观和情趣爱好。 用印南先生的话说，让书架成为自己的镜子。 2.2 培养阅读习惯 1.刻意培养习惯 当阅读像吃饭睡觉一样，成为生活的一部分，我们才能说，我们拥有了阅读的习惯。但是事实上，我们很多人在等有时间就来读书，可是等来的时间是不确定的，会随时被占用。 因此，我们必须刻意培养好的阅读习惯。印南先生推荐的阅读好习惯有： 固定时间和建立仪式感 晨间阅读，而不是夜间阅读 今日事，今日毕，一天一本书 快读书和精阅读同时进行，比例为9:1 2.准备笔记本记录 快速，深入地阅读始于摘录。印南先生建议我们准备两种笔记本用于摘录。 第一种是A4纸大小的笔记本，用于“一行采集”，仅摘取最有魅力的片段。他强调，不要原封不动地抄写，要短小精悍。一本书中所有的“一行采集”，最终汇集成“阅读集锦”。 第二种是用于记录“一行精华”和“一行评论”的笔记本。“一行精华”是从“阅读集锦”中，找到自己能一眼相中的最钟爱的一行，再摘录出来，形成“一行精华”。“一行评论”就是对“一行精华”的感想，30到40字左右的篇幅。 3.一定制定周计划 为了实现一天一本的阅读节奏，最重要的就是要确定好明天要读的书。因为，为了能够按计划阅读明天该读的书，必须做到今日事，今日毕。 那么专门抽出一天时间，把一周的读书计划制定出来，是保证每天一本最有效的措施。 4.定期整理书架 整理书架的原则:每三个月一次，一定要持续进行。因为只有这样，才能实现高效的书架流动。 为什么时间是三个月？印南先生给出了解释。 最近3个月的书，也会有不需要的书3个月前的新书，已经不是新书过去保留的书，现在不一定要保留 2.3 运用基本技巧 1.仔细阅读序言和目录 印南先生说，合理利用序言与目录，是确保高效轻松阅读体验的铁则。因为序言是作者为了提高书籍的购买率，最苦心孤诣的地方，它帮我们了解作者的写作意图，而目录帮助我们选出自己要阅读的章节。 2.仅读开头和结尾的5行 当我们无法决定是否跳读的时候，只读前5行和后5行，可以帮我们把于己无益的时间省下来，同时有效避免漏读有价值的部分。 3.确定了关键词之后再阅读 当我们明确了阅读目的，利用关键词搜索阅读，总能找寻想要获得的信息。 4.使用多种阅读节奏 我们在不同的阅读内容上，使用不同的阅读速度，可以避免单调，同时也能帮我们找到最舒适的阅读节奏，让我们享受到阅读的愉悦感。 3.阅读的意义可能你会对快速阅读术产生怀疑，阅读本身是一件愉悦身心的事情，如果一味快读，会不会失去阅读的乐趣？其实，印南先生主张阅读生活应该是快乐的，书虽然不是生活的必需品，但是有书相伴的生活，比起没有，要更加快乐。 他把书籍分为三种类型：不必读的书，无法快速阅读的书和可以快速阅读的书。他认为故事性强的内容，没有必要快速阅读；不读取故事情节，心灵会变得贫瘠。因此，跟着印南先生更新阅读理念，践行快读的方法并不会让我们失去阅读的乐趣。 我们要做的就是赋予大量阅读这件事情巨大的意义，对于你来说，为什么要进行大量阅读？对于我来说，阅读已经成为我生活的一部分，我能从中获得快乐和发自内心的喜悦。如果说能够提高我的自身修养，提高自身素质，那是阅读带给我的副产品。 印南先生说，拥有大量的知识，并不意味着这个人就非常了不起。这与全身穿着名牌的人觉得自己优雅高贵是同样的道理。醉心收集知识的人，往往会误以为自己非常优秀。]]></content>
      <tags>
        <tag>有感</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jsFiddle]]></title>
    <url>%2F2017%2F11%2F24%2FjsFiddle%2F</url>
    <content type="text"><![CDATA[]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>tag</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vedio]]></title>
    <url>%2F2017%2F11%2F24%2Fvedio%2F</url>
    <content type="text"><![CDATA[youtube]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>tag</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bootstrap Callout]]></title>
    <url>%2F2017%2F11%2F23%2FbootstrapCallout%2F</url>
    <content type="text"><![CDATA[Content default Content primary Content success Content info Content warning Content danger]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>tag</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[突破容器宽度限制的图片]]></title>
    <url>%2F2017%2F11%2F23%2Ffullimage%2F</url>
    <content type="text"><![CDATA[在岁月之巅放牧心灵, 山一程, 水一程, 红尘、沧桑、流年、清欢, 一个人的夜晚, 我们终于学会了: 于一杯淡泊中, 笑望两个人的白月光。]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>tag</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文本居中引用]]></title>
    <url>%2F2017%2F11%2F23%2Fquote%2F</url>
    <content type="text"><![CDATA[人的一切痛苦, 本质都是对自己无能的愤怒。王小波一只上海的蝴蝶煽动翅膀后, 引起了厦门两个人的龙卷风。世事无常, 往往事情的发展总是出人意料, 令人啼笑皆非。且不问结果如何, 尽自己之所能, 积极地面对。古语有言, 尽人事听天命, 大概便是如此。 blah blah blah blah blah blah]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>tag</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F11%2F23%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>hexo</category>
        <category>system</category>
      </categories>
  </entry>
</search>
